name: Pull Request Validation

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: false

      - name: Get dependencies
        run: go mod download

      - name: Build
        run: go build -v ./...

      - name: Run unit tests
        run: go test -v ./... -coverprofile=coverage.out

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html
          retention-days: 14

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: false

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m --issues-exit-code=1

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: false

      - name: Run govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: '1.24'
          go-package: ./...

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: false

      - name: Get dependencies
        run: go mod download

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.0"
          terraform_wrapper: false

      - name: Build provider for testing
        run: |
          go build -o terraform-provider-yamlflattener
          mkdir -p ~/.terraform.d/plugins/local/perun-engineering/yamlflattener/0.1.0/linux_amd64/
          cp terraform-provider-yamlflattener ~/.terraform.d/plugins/local/perun-engineering/yamlflattener/0.1.0/linux_amd64/

      - name: Create terraform dev override config
        run: |
          cat > ~/.terraformrc << EOF
          provider_installation {
            dev_overrides {
              "perun-engineering/yamlflattener" = "$HOME/.terraform.d/plugins/local/perun-engineering/yamlflattener/0.1.0/linux_amd64/"
            }
            direct {}
          }
          EOF

      - name: Run integration tests
        run: |
          cd examples/complete-example
          # Remove version constraint for local testing with dev overrides
          sed -i 's/version = ">= 0.1.0"/# version = ">= 0.1.0"/' main.tf
          # Skip terraform init as recommended when using dev overrides
          # terraform init
          terraform validate
          terraform plan -out=tfplan

  pr-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [build, lint, integration]
    if: always()
    steps:
      - name: Generate PR validation summary
        run: |
          echo "# Pull Request Validation Results" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Build job status
          echo "## Build and Test" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ Build and tests passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build.result }}" == "skipped" ]; then
            echo "⏭️ Build and tests were skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build or tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Lint job status
          echo "## Linting" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.lint.result }}" == "success" ]; then
            echo "✅ Code linting passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.lint.result }}" == "skipped" ]; then
            echo "⏭️ Code linting was skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code linting failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY


          # Integration job status
          echo "## Integration Tests" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.integration.result }}" == "success" ]; then
            echo "✅ Integration tests passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.integration.result }}" == "skipped" ]; then
            echo "⏭️ Integration tests were skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Integration tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          echo "## Overall Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.lint.result }}" == "success" ] && [ "${{ needs.integration.result }}" == "success" ]; then
            echo "✅ **All validation checks passed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **One or more validation checks failed**" >> $GITHUB_STEP_SUMMARY
          fi
